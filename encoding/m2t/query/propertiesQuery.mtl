[comment encoding = UTF-8 /]
[**
 * Module contains all additional model queries. Their names start with "e_".
 */]
[module propertiesQuery('http://www.eclipse.org/uml2/5.0.0/Types', 'http://www.eclipse.org/uml2/5.0.0/UML', 'http://www.eclipse.org/uml2/5.0.0/UML/Profile/Standard')]

[**
 * Returns a Boolean if all items of the model should be included or not
 * @param anOclAny Any type.
 */]
[query public e_includeAllItems( anOclAny : OclAny ) : Boolean =
	getProperty( 'includeAllItems' ).trim().equalsIgnoreCase( 'true' )
/]

[**
 * Returns the name of the subset
 * @param anOclAny Any type.
 */]
[query public e_subsetName( anOclAny : OclAny ) : String =
	getProperty( 'subset.name' )	
/]

[**
 * Returns the title of the subset
 * @param anOclAny Any type.
 */]
[query public e_subsetTitle( anOclAny : OclAny ) : String =
	getProperty( e_subsetName() + '.' + 'title' )	
/]

[**
 * Returns a sequence of names of the subset classes
 * @param anOclAny Any type.
 */]
[query public e_subsetClasses( anOclAny : OclAny ) : Sequence(String) =
	getProperty( e_subsetName() + '.' + 'class' ).
		replaceAll('\\s', '').
		tokenize(',')->asSequence()
/]

[**
 * Returns a sequence of names of the generalized subset classes
 * @param anOclAny Any type.
 */]
[query public e_subsetGeneralizedClasses( anOclAny : OclAny ) : Sequence(String) =
	getProperty( e_subsetName() + '.' + 'generalizedClass' ).
		replaceAll('\\s', '').
		tokenize(',')->asSequence()	
/]

[**
 * Returns a sequence of names of all subset classes
 * @param anOclAny Any type.
 */]
[query public e_subsetAllClasses( anOclAny : OclAny ) : Sequence(String) =
	e_subsetClasses()->union( e_subsetGeneralizedClasses() )
/]
[comment][query public e_subsetAllClasses( anOclAny : OclAny ) : Sequence(String) =
	e_subsetClasses()->append( e_subsetGeneralizedClasses() )
/][/comment]

[**
 * Returns a sequence of names of the subset data types
 * @param anOclAny Any type.
 */]
[query public e_subsetDataTypes( anOclAny : OclAny ) : Sequence(String) =
	getProperty( e_subsetName() + '.' + 'dataType' ).
		replaceAll('\\s', '').
		tokenize(',')->asSequence()
/]

[**
 * Returns a sequence of names of the subset enumerations
 * @param anOclAny Any type.
 */]
[query public e_subsetEnumerations( anOclAny : OclAny ) : Sequence(String) =
	getProperty( e_subsetName() + '.' + 'enumeration' ).
		replaceAll('\\s', '').
		tokenize(',')->asSequence()
/]

[**
 * Returns a sequence of names of all subset items (classes, data types, enumerations)
 * @param anOclAny Any type.
 */]
[query public e_subsetItems( anOclAny : OclAny ) : Sequence(String) =
	e_subsetAllClasses()->union( e_subsetDataTypes() )->union( e_subsetEnumerations() )
/]

[**
 * Returns a sequence of names of attributes of a specific class of the subset
 * @param anOclAny Any type.
 */]
[query public e_subsetClassAttributes( aClassName : String ) : Sequence(String) =
	getProperty( e_subsetName() + '.' + 'class' + '.' + aClassName).
		replaceAll('\\s', '').
		tokenize(',')->asSequence()
/]

[**
 * Returns a sequence of names of attributes of a specific data type of the subset
 * @param anOclAny Any type.
 */]
[query public e_subsetDataTypeAttributes( aDataTypeName : String ) : Sequence(String) =
	getProperty( e_subsetName() + '.' + 'dataType' + '.' + aDataTypeName).
		replaceAll('\\s', '').
		tokenize(',')->asSequence()
/]

[**
 * Returns a sequence of packages relevant to the subset
 * @param anOclAny Any type.
 */]
[comment]todo: using classifier can be risky because it includes associations as well[/comment]
[query public e_subsetPackages( aModel : Model ) : OrderedSet(String) =
	aModel.eAllContents(Package)->select(p : Package | p.name = 'DDICDILibrary').eAllContents(Classifier).qualifiedName
		->select( s : String | e_subsetItems()->includes( s.substring( s.lastIndex( '::' )+2 ) ) )
		->collect( s : String | s.substring( 1 , s.lastIndex( '::' ) ) )
		.tokenize('::')
		->asOrderedSet()
/]

[comment]

aPackage.qualifiedName.substring( aPackage.qualifiedName.lastIndex( '::' )+2 )

OK
		->select( s : String | e_subsetAllClasses()->includes( s ) )



		->select( s : String | e_subsetAllClasses()->includes( s.substring( s.lastIndex('::') ) ) )

	aModel.eAllContents(Package).eContents(Class)
		->select( c : Class | e_subsetAllClasses()->includes(c.name) )


let usedPackages : Sequence(String)
	[for ( aPackage : Package | aModel.eAllContents(Package) ) ]
		[for ( aClass : Class | aPackage.eContents(Class)  ) 
			->select( c : Class | e_subsetAllClasses()->includes(c.name) )
			]
			usedPackages->append
		[/for]
	[/for][/comment]
