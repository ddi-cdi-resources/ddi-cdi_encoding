//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.3 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.ddialliance.specification.ddi_cdi._1_0.xmlschema;

import java.util.ArrayList;
import java.util.List;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlType;


/**
 * Definition
 *             ==========
 *             Use of a code for variable identification in the context of a data structure and a variable descriptor component.
 *             
 *             Examples
 *             ========
 *             Consider two variables, i.e. income and age, with values appearing in the same column. Codes "income" and "age" are descriptors. They appear multiple time in a variable descriptor component, one for each value in the variable value component. Each descriptor references one of those values. This way it's possible to identify which values correspond to income and which ones to age.
 * 
 * <p>Java class for Descriptor complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>{@code
 * <complexType name="Descriptor">
 *   <complexContent>
 *     <extension base="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}KeyMember">
 *       <sequence>
 *         <element name="Descriptor_refersTo_ReferenceValue" maxOccurs="unbounded">
 *           <complexType>
 *             <complexContent>
 *               <restriction base="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}Reference">
 *                 <sequence>
 *                   <element name="ddiReference" type="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}InternationalRegistrationDataIdentifier" minOccurs="0"/>
 *                   <element name="validType">
 *                     <simpleType>
 *                       <restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
 *                         <enumeration value="ReferenceValue"/>
 *                       </restriction>
 *                     </simpleType>
 *                   </element>
 *                 </sequence>
 *                 <attribute name="isAssociationReference" type="{http://www.w3.org/2001/XMLSchema}boolean" fixed="true" />
 *               </restriction>
 *             </complexContent>
 *           </complexType>
 *         </element>
 *         <element name="Descriptor_identifies_ReferenceVariable">
 *           <complexType>
 *             <complexContent>
 *               <restriction base="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}Reference">
 *                 <sequence>
 *                   <element name="ddiReference" type="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}InternationalRegistrationDataIdentifier" minOccurs="0"/>
 *                   <element name="validType" maxOccurs="unbounded" minOccurs="0">
 *                     <simpleType>
 *                       <restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
 *                         <enumeration value="ReferenceVariable"/>
 *                       </restriction>
 *                     </simpleType>
 *                   </element>
 *                 </sequence>
 *                 <attribute name="isAssociationReference" type="{http://www.w3.org/2001/XMLSchema}boolean" fixed="true" />
 *               </restriction>
 *             </complexContent>
 *           </complexType>
 *         </element>
 *         <element name="Descriptor_hasValueFrom_DescriptorValueDomain">
 *           <complexType>
 *             <complexContent>
 *               <restriction base="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}Reference">
 *                 <sequence>
 *                   <element name="ddiReference" type="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}InternationalRegistrationDataIdentifier" minOccurs="0"/>
 *                   <element name="validType" maxOccurs="unbounded" minOccurs="0">
 *                     <simpleType>
 *                       <restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
 *                         <enumeration value="DescriptorValueDomain"/>
 *                       </restriction>
 *                     </simpleType>
 *                   </element>
 *                 </sequence>
 *                 <attribute name="isAssociationReference" type="{http://www.w3.org/2001/XMLSchema}boolean" fixed="true" />
 *               </restriction>
 *             </complexContent>
 *           </complexType>
 *         </element>
 *       </sequence>
 *     </extension>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Descriptor", propOrder = {
    "descriptorRefersToReferenceValue",
    "descriptorIdentifiesReferenceVariable",
    "descriptorHasValueFromDescriptorValueDomain"
})
public class Descriptor
    extends KeyMember
{

    @XmlElement(name = "Descriptor_refersTo_ReferenceValue", required = true)
    protected List<Descriptor.DescriptorRefersToReferenceValue> descriptorRefersToReferenceValue;
    @XmlElement(name = "Descriptor_identifies_ReferenceVariable", required = true)
    protected Descriptor.DescriptorIdentifiesReferenceVariable descriptorIdentifiesReferenceVariable;
    @XmlElement(name = "Descriptor_hasValueFrom_DescriptorValueDomain", required = true)
    protected Descriptor.DescriptorHasValueFromDescriptorValueDomain descriptorHasValueFromDescriptorValueDomain;

    /**
     * Gets the value of the descriptorRefersToReferenceValue property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the Jakarta XML Binding object.
     * This is why there is not a {@code set} method for the descriptorRefersToReferenceValue property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDescriptorRefersToReferenceValue().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Descriptor.DescriptorRefersToReferenceValue }
     * 
     * 
     * @return
     *     The value of the descriptorRefersToReferenceValue property.
     */
    public List<Descriptor.DescriptorRefersToReferenceValue> getDescriptorRefersToReferenceValue() {
        if (descriptorRefersToReferenceValue == null) {
            descriptorRefersToReferenceValue = new ArrayList<>();
        }
        return this.descriptorRefersToReferenceValue;
    }

    /**
     * Gets the value of the descriptorIdentifiesReferenceVariable property.
     * 
     * @return
     *     possible object is
     *     {@link Descriptor.DescriptorIdentifiesReferenceVariable }
     *     
     */
    public Descriptor.DescriptorIdentifiesReferenceVariable getDescriptorIdentifiesReferenceVariable() {
        return descriptorIdentifiesReferenceVariable;
    }

    /**
     * Sets the value of the descriptorIdentifiesReferenceVariable property.
     * 
     * @param value
     *     allowed object is
     *     {@link Descriptor.DescriptorIdentifiesReferenceVariable }
     *     
     */
    public void setDescriptorIdentifiesReferenceVariable(Descriptor.DescriptorIdentifiesReferenceVariable value) {
        this.descriptorIdentifiesReferenceVariable = value;
    }

    /**
     * Gets the value of the descriptorHasValueFromDescriptorValueDomain property.
     * 
     * @return
     *     possible object is
     *     {@link Descriptor.DescriptorHasValueFromDescriptorValueDomain }
     *     
     */
    public Descriptor.DescriptorHasValueFromDescriptorValueDomain getDescriptorHasValueFromDescriptorValueDomain() {
        return descriptorHasValueFromDescriptorValueDomain;
    }

    /**
     * Sets the value of the descriptorHasValueFromDescriptorValueDomain property.
     * 
     * @param value
     *     allowed object is
     *     {@link Descriptor.DescriptorHasValueFromDescriptorValueDomain }
     *     
     */
    public void setDescriptorHasValueFromDescriptorValueDomain(Descriptor.DescriptorHasValueFromDescriptorValueDomain value) {
        this.descriptorHasValueFromDescriptorValueDomain = value;
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>{@code
     * <complexType>
     *   <complexContent>
     *     <restriction base="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}Reference">
     *       <sequence>
     *         <element name="ddiReference" type="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}InternationalRegistrationDataIdentifier" minOccurs="0"/>
     *         <element name="validType" maxOccurs="unbounded" minOccurs="0">
     *           <simpleType>
     *             <restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
     *               <enumeration value="DescriptorValueDomain"/>
     *             </restriction>
     *           </simpleType>
     *         </element>
     *       </sequence>
     *       <attribute name="isAssociationReference" type="{http://www.w3.org/2001/XMLSchema}boolean" fixed="true" />
     *     </restriction>
     *   </complexContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class DescriptorHasValueFromDescriptorValueDomain
        extends Reference
    {


    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>{@code
     * <complexType>
     *   <complexContent>
     *     <restriction base="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}Reference">
     *       <sequence>
     *         <element name="ddiReference" type="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}InternationalRegistrationDataIdentifier" minOccurs="0"/>
     *         <element name="validType" maxOccurs="unbounded" minOccurs="0">
     *           <simpleType>
     *             <restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
     *               <enumeration value="ReferenceVariable"/>
     *             </restriction>
     *           </simpleType>
     *         </element>
     *       </sequence>
     *       <attribute name="isAssociationReference" type="{http://www.w3.org/2001/XMLSchema}boolean" fixed="true" />
     *     </restriction>
     *   </complexContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class DescriptorIdentifiesReferenceVariable
        extends Reference
    {


    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>{@code
     * <complexType>
     *   <complexContent>
     *     <restriction base="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}Reference">
     *       <sequence>
     *         <element name="ddiReference" type="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}InternationalRegistrationDataIdentifier" minOccurs="0"/>
     *         <element name="validType">
     *           <simpleType>
     *             <restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
     *               <enumeration value="ReferenceValue"/>
     *             </restriction>
     *           </simpleType>
     *         </element>
     *       </sequence>
     *       <attribute name="isAssociationReference" type="{http://www.w3.org/2001/XMLSchema}boolean" fixed="true" />
     *     </restriction>
     *   </complexContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class DescriptorRefersToReferenceValue
        extends Reference
    {


    }

}
