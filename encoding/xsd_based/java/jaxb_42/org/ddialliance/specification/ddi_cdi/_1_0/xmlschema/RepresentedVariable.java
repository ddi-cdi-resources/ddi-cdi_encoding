//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.3 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.ddialliance.specification.ddi_cdi._1_0.xmlschema;

import java.util.ArrayList;
import java.util.List;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlSeeAlso;
import jakarta.xml.bind.annotation.XmlType;


/**
 * Definition 
 *             ========== 
 *             Conceptual variable with a substantive value domain specified.   
 *             
 *             Examples 
 *             ========== 
 *             The pair (Number of Employees, Integer), where "Number of Employees" is the characteristic of the population (variable) and "Integer" is how that measure will be represented (value domain).  
 *             
 *             Explanatory notes 
 *             =================== 
 *             Extends from conceptual variable and can contain all descriptive fields without creating a conceptual variable. By referencing a conceptual variable it can indicate a common relationship with represented variables expressing the same characteristic of a universe measured in another way, such as Age of Persons in hours rather than years. Represented variable constrains the coverage of the unit type to a specific universe. In the above case the universe with the measurement of Age in hours may be constrained to Persons under 5 days (120 hours old). Represented variable can define sentinel values for multiple storage systems which have the same conceptual domain but specialized value domains.
 * 
 * <p>Java class for RepresentedVariable complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>{@code
 * <complexType name="RepresentedVariable">
 *   <complexContent>
 *     <extension base="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}ConceptualVariable">
 *       <sequence>
 *         <element name="describedUnitOfMeasure" type="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}ControlledVocabularyEntry" minOccurs="0"/>
 *         <element name="hasIntendedDataType" type="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}ControlledVocabularyEntry" minOccurs="0"/>
 *         <element name="simpleUnitOfMeasure" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         <element name="RepresentedVariable_takesSentinelValuesFrom_SentinelValueDomain" maxOccurs="unbounded" minOccurs="0">
 *           <complexType>
 *             <complexContent>
 *               <restriction base="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}Reference">
 *                 <sequence>
 *                   <element name="ddiReference" type="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}InternationalRegistrationDataIdentifier" minOccurs="0"/>
 *                   <element name="validType" maxOccurs="unbounded" minOccurs="0">
 *                     <simpleType>
 *                       <restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
 *                         <enumeration value="SentinelValueDomain"/>
 *                       </restriction>
 *                     </simpleType>
 *                   </element>
 *                 </sequence>
 *                 <attribute name="isAssociationReference" type="{http://www.w3.org/2001/XMLSchema}boolean" fixed="true" />
 *               </restriction>
 *             </complexContent>
 *           </complexType>
 *         </element>
 *         <element name="RepresentedVariable_takesSubstantiveValuesFrom_SubstantiveValueDomain" minOccurs="0">
 *           <complexType>
 *             <complexContent>
 *               <restriction base="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}Reference">
 *                 <sequence>
 *                   <element name="ddiReference" type="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}InternationalRegistrationDataIdentifier" minOccurs="0"/>
 *                   <element name="validType" maxOccurs="unbounded" minOccurs="0">
 *                     <simpleType>
 *                       <restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
 *                         <enumeration value="DescriptorValueDomain"/>
 *                         <enumeration value="SubstantiveValueDomain"/>
 *                       </restriction>
 *                     </simpleType>
 *                   </element>
 *                 </sequence>
 *                 <attribute name="isAssociationReference" type="{http://www.w3.org/2001/XMLSchema}boolean" fixed="true" />
 *               </restriction>
 *             </complexContent>
 *           </complexType>
 *         </element>
 *       </sequence>
 *     </extension>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RepresentedVariable", propOrder = {
    "describedUnitOfMeasure",
    "hasIntendedDataType",
    "simpleUnitOfMeasure",
    "representedVariableTakesSentinelValuesFromSentinelValueDomain",
    "representedVariableTakesSubstantiveValuesFromSubstantiveValueDomain"
})
@XmlSeeAlso({
    DescriptorVariable.class,
    InstanceVariable.class,
    ReferenceVariable.class
})
public class RepresentedVariable
    extends ConceptualVariable
{

    protected ControlledVocabularyEntry describedUnitOfMeasure;
    protected ControlledVocabularyEntry hasIntendedDataType;
    protected String simpleUnitOfMeasure;
    @XmlElement(name = "RepresentedVariable_takesSentinelValuesFrom_SentinelValueDomain")
    protected List<RepresentedVariable.RepresentedVariableTakesSentinelValuesFromSentinelValueDomain> representedVariableTakesSentinelValuesFromSentinelValueDomain;
    @XmlElement(name = "RepresentedVariable_takesSubstantiveValuesFrom_SubstantiveValueDomain")
    protected RepresentedVariable.RepresentedVariableTakesSubstantiveValuesFromSubstantiveValueDomain representedVariableTakesSubstantiveValuesFromSubstantiveValueDomain;

    /**
     * Gets the value of the describedUnitOfMeasure property.
     * 
     * @return
     *     possible object is
     *     {@link ControlledVocabularyEntry }
     *     
     */
    public ControlledVocabularyEntry getDescribedUnitOfMeasure() {
        return describedUnitOfMeasure;
    }

    /**
     * Sets the value of the describedUnitOfMeasure property.
     * 
     * @param value
     *     allowed object is
     *     {@link ControlledVocabularyEntry }
     *     
     */
    public void setDescribedUnitOfMeasure(ControlledVocabularyEntry value) {
        this.describedUnitOfMeasure = value;
    }

    /**
     * Gets the value of the hasIntendedDataType property.
     * 
     * @return
     *     possible object is
     *     {@link ControlledVocabularyEntry }
     *     
     */
    public ControlledVocabularyEntry getHasIntendedDataType() {
        return hasIntendedDataType;
    }

    /**
     * Sets the value of the hasIntendedDataType property.
     * 
     * @param value
     *     allowed object is
     *     {@link ControlledVocabularyEntry }
     *     
     */
    public void setHasIntendedDataType(ControlledVocabularyEntry value) {
        this.hasIntendedDataType = value;
    }

    /**
     * Gets the value of the simpleUnitOfMeasure property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSimpleUnitOfMeasure() {
        return simpleUnitOfMeasure;
    }

    /**
     * Sets the value of the simpleUnitOfMeasure property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSimpleUnitOfMeasure(String value) {
        this.simpleUnitOfMeasure = value;
    }

    /**
     * Gets the value of the representedVariableTakesSentinelValuesFromSentinelValueDomain property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the Jakarta XML Binding object.
     * This is why there is not a {@code set} method for the representedVariableTakesSentinelValuesFromSentinelValueDomain property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRepresentedVariableTakesSentinelValuesFromSentinelValueDomain().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link RepresentedVariable.RepresentedVariableTakesSentinelValuesFromSentinelValueDomain }
     * 
     * 
     * @return
     *     The value of the representedVariableTakesSentinelValuesFromSentinelValueDomain property.
     */
    public List<RepresentedVariable.RepresentedVariableTakesSentinelValuesFromSentinelValueDomain> getRepresentedVariableTakesSentinelValuesFromSentinelValueDomain() {
        if (representedVariableTakesSentinelValuesFromSentinelValueDomain == null) {
            representedVariableTakesSentinelValuesFromSentinelValueDomain = new ArrayList<>();
        }
        return this.representedVariableTakesSentinelValuesFromSentinelValueDomain;
    }

    /**
     * Gets the value of the representedVariableTakesSubstantiveValuesFromSubstantiveValueDomain property.
     * 
     * @return
     *     possible object is
     *     {@link RepresentedVariable.RepresentedVariableTakesSubstantiveValuesFromSubstantiveValueDomain }
     *     
     */
    public RepresentedVariable.RepresentedVariableTakesSubstantiveValuesFromSubstantiveValueDomain getRepresentedVariableTakesSubstantiveValuesFromSubstantiveValueDomain() {
        return representedVariableTakesSubstantiveValuesFromSubstantiveValueDomain;
    }

    /**
     * Sets the value of the representedVariableTakesSubstantiveValuesFromSubstantiveValueDomain property.
     * 
     * @param value
     *     allowed object is
     *     {@link RepresentedVariable.RepresentedVariableTakesSubstantiveValuesFromSubstantiveValueDomain }
     *     
     */
    public void setRepresentedVariableTakesSubstantiveValuesFromSubstantiveValueDomain(RepresentedVariable.RepresentedVariableTakesSubstantiveValuesFromSubstantiveValueDomain value) {
        this.representedVariableTakesSubstantiveValuesFromSubstantiveValueDomain = value;
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>{@code
     * <complexType>
     *   <complexContent>
     *     <restriction base="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}Reference">
     *       <sequence>
     *         <element name="ddiReference" type="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}InternationalRegistrationDataIdentifier" minOccurs="0"/>
     *         <element name="validType" maxOccurs="unbounded" minOccurs="0">
     *           <simpleType>
     *             <restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
     *               <enumeration value="SentinelValueDomain"/>
     *             </restriction>
     *           </simpleType>
     *         </element>
     *       </sequence>
     *       <attribute name="isAssociationReference" type="{http://www.w3.org/2001/XMLSchema}boolean" fixed="true" />
     *     </restriction>
     *   </complexContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class RepresentedVariableTakesSentinelValuesFromSentinelValueDomain
        extends Reference
    {


    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>{@code
     * <complexType>
     *   <complexContent>
     *     <restriction base="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}Reference">
     *       <sequence>
     *         <element name="ddiReference" type="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}InternationalRegistrationDataIdentifier" minOccurs="0"/>
     *         <element name="validType" maxOccurs="unbounded" minOccurs="0">
     *           <simpleType>
     *             <restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
     *               <enumeration value="DescriptorValueDomain"/>
     *               <enumeration value="SubstantiveValueDomain"/>
     *             </restriction>
     *           </simpleType>
     *         </element>
     *       </sequence>
     *       <attribute name="isAssociationReference" type="{http://www.w3.org/2001/XMLSchema}boolean" fixed="true" />
     *     </restriction>
     *   </complexContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class RepresentedVariableTakesSubstantiveValuesFromSubstantiveValueDomain
        extends Reference
    {


    }

}
