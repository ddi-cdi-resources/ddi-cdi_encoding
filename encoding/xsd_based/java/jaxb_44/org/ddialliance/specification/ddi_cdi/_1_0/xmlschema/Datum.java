//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.3 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.ddialliance.specification.ddi_cdi._1_0.xmlschema;

import java.util.ArrayList;
import java.util.List;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlSeeAlso;
import jakarta.xml.bind.annotation.XmlType;


/**
 * Definition 
 *             ============ 
 *             Correspondence of a data instance to the concept it represents.  
 *             
 *             Examples 
 *             ========== 
 *             A systolic blood pressure of 122 is measured. The single data instance (instance value) for that measurement is the character string "122". The datum in this case is the association of the conceptual value, i.e. the underlying measured concept (a blood pressure at that level), with the instance value.    
 *             if a datum represents the conceptual value “married” with a code “M,” it is not the same datum where that conceptual value is represented with a code “1”. If the datum which uses the code “M” is present in more than one data set, it is still the same datum.
 *             
 *             Explanatory notes 
 *             =================== 
 *             The datum is a reification of the association between instance value and conceptual value. It is a designation (a representation of a concept by a sign) in the signification pattern. The data instance (instance value) is the signifier and the concept it represents (conceptual value) is the signified. The datum has an association with an instance variable which allows the attachment of a unit of measurement, a datatype, and a population. These instance variable attributes are critical for interpreting the signifier.  NOTE: This is NOT datum as defined in The Data Documentation Initiative Lifecycle specification, which is more limited in breadth. This specification takes a little more formal (semiotic) description of a datum using the signification pattern.
 *             The datum is reusable, and may appear in more than one data set, carrying with it its full contextualized meaning and identity. The instance variables and instance values with which it is associated will therefore be functionally similar or identical across its appearance in different data instances. Instance variable and instance value are specific to a single data set instance – datum is not.
 * 
 * <p>Java class for Datum complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>{@code
 * <complexType name="Datum">
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <element name="catalogDetails" type="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}CatalogDetails" minOccurs="0"/>
 *         <element name="identifier" type="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}Identifier" minOccurs="0"/>
 *         <element name="Datum_uses_Notation" minOccurs="0">
 *           <complexType>
 *             <complexContent>
 *               <restriction base="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}AssociationReference">
 *                 <sequence>
 *                   <element name="ddiReference" type="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}InternationalRegistrationDataIdentifier" minOccurs="0"/>
 *                   <element name="validType" maxOccurs="unbounded" minOccurs="0">
 *                     <simpleType>
 *                       <restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
 *                         <enumeration value="Notation"/>
 *                       </restriction>
 *                     </simpleType>
 *                   </element>
 *                 </sequence>
 *               </restriction>
 *             </complexContent>
 *           </complexType>
 *         </element>
 *         <element name="Datum_denotes_ConceptualValue">
 *           <complexType>
 *             <complexContent>
 *               <restriction base="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}AssociationReference">
 *                 <sequence>
 *                   <element name="ddiReference" type="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}InternationalRegistrationDataIdentifier" minOccurs="0"/>
 *                   <element name="validType" maxOccurs="unbounded" minOccurs="0">
 *                     <simpleType>
 *                       <restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
 *                         <enumeration value="ConceptualValue"/>
 *                         <enumeration value="DimensionalKeyDefinitionMember"/>
 *                         <enumeration value="KeyDefinitionMember"/>
 *                       </restriction>
 *                     </simpleType>
 *                   </element>
 *                 </sequence>
 *               </restriction>
 *             </complexContent>
 *           </complexType>
 *         </element>
 *         <element name="Datum_uses_InstanceValue" maxOccurs="unbounded">
 *           <complexType>
 *             <complexContent>
 *               <restriction base="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}AssociationReference">
 *                 <sequence>
 *                   <element name="ddiReference" type="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}InternationalRegistrationDataIdentifier" minOccurs="0"/>
 *                   <element name="validType" maxOccurs="unbounded" minOccurs="0">
 *                     <simpleType>
 *                       <restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
 *                         <enumeration value="Descriptor"/>
 *                         <enumeration value="DimensionalKeyMember"/>
 *                         <enumeration value="InstanceValue"/>
 *                         <enumeration value="KeyMember"/>
 *                         <enumeration value="LongMainKeyMember"/>
 *                         <enumeration value="MainKeyMember"/>
 *                         <enumeration value="ReferenceValue"/>
 *                         <enumeration value="WideKeyMember"/>
 *                       </restriction>
 *                     </simpleType>
 *                   </element>
 *                 </sequence>
 *               </restriction>
 *             </complexContent>
 *           </complexType>
 *         </element>
 *         <element name="Datum_isBoundedBy_InstanceVariable" maxOccurs="unbounded">
 *           <complexType>
 *             <complexContent>
 *               <restriction base="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}AssociationReference">
 *                 <sequence>
 *                   <element name="ddiReference" type="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}InternationalRegistrationDataIdentifier" minOccurs="0"/>
 *                   <element name="validType" maxOccurs="unbounded" minOccurs="0">
 *                     <simpleType>
 *                       <restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
 *                         <enumeration value="InstanceVariable"/>
 *                       </restriction>
 *                     </simpleType>
 *                   </element>
 *                 </sequence>
 *               </restriction>
 *             </complexContent>
 *           </complexType>
 *         </element>
 *       </sequence>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Datum", propOrder = {
    "catalogDetails",
    "identifier",
    "datumUsesNotation",
    "datumDenotesConceptualValue",
    "datumUsesInstanceValue",
    "datumIsBoundedByInstanceVariable"
})
@XmlSeeAlso({
    RevisableDatum.class
})
public class Datum {

    protected CatalogDetails catalogDetails;
    protected Identifier identifier;
    @XmlElement(name = "Datum_uses_Notation")
    protected Datum.DatumUsesNotation datumUsesNotation;
    @XmlElement(name = "Datum_denotes_ConceptualValue", required = true)
    protected Datum.DatumDenotesConceptualValue datumDenotesConceptualValue;
    @XmlElement(name = "Datum_uses_InstanceValue", required = true)
    protected List<Datum.DatumUsesInstanceValue> datumUsesInstanceValue;
    @XmlElement(name = "Datum_isBoundedBy_InstanceVariable", required = true)
    protected List<Datum.DatumIsBoundedByInstanceVariable> datumIsBoundedByInstanceVariable;

    /**
     * Gets the value of the catalogDetails property.
     * 
     * @return
     *     possible object is
     *     {@link CatalogDetails }
     *     
     */
    public CatalogDetails getCatalogDetails() {
        return catalogDetails;
    }

    /**
     * Sets the value of the catalogDetails property.
     * 
     * @param value
     *     allowed object is
     *     {@link CatalogDetails }
     *     
     */
    public void setCatalogDetails(CatalogDetails value) {
        this.catalogDetails = value;
    }

    /**
     * Gets the value of the identifier property.
     * 
     * @return
     *     possible object is
     *     {@link Identifier }
     *     
     */
    public Identifier getIdentifier() {
        return identifier;
    }

    /**
     * Sets the value of the identifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link Identifier }
     *     
     */
    public void setIdentifier(Identifier value) {
        this.identifier = value;
    }

    /**
     * Gets the value of the datumUsesNotation property.
     * 
     * @return
     *     possible object is
     *     {@link Datum.DatumUsesNotation }
     *     
     */
    public Datum.DatumUsesNotation getDatumUsesNotation() {
        return datumUsesNotation;
    }

    /**
     * Sets the value of the datumUsesNotation property.
     * 
     * @param value
     *     allowed object is
     *     {@link Datum.DatumUsesNotation }
     *     
     */
    public void setDatumUsesNotation(Datum.DatumUsesNotation value) {
        this.datumUsesNotation = value;
    }

    /**
     * Gets the value of the datumDenotesConceptualValue property.
     * 
     * @return
     *     possible object is
     *     {@link Datum.DatumDenotesConceptualValue }
     *     
     */
    public Datum.DatumDenotesConceptualValue getDatumDenotesConceptualValue() {
        return datumDenotesConceptualValue;
    }

    /**
     * Sets the value of the datumDenotesConceptualValue property.
     * 
     * @param value
     *     allowed object is
     *     {@link Datum.DatumDenotesConceptualValue }
     *     
     */
    public void setDatumDenotesConceptualValue(Datum.DatumDenotesConceptualValue value) {
        this.datumDenotesConceptualValue = value;
    }

    /**
     * Gets the value of the datumUsesInstanceValue property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the Jakarta XML Binding object.
     * This is why there is not a {@code set} method for the datumUsesInstanceValue property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDatumUsesInstanceValue().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Datum.DatumUsesInstanceValue }
     * 
     * 
     * @return
     *     The value of the datumUsesInstanceValue property.
     */
    public List<Datum.DatumUsesInstanceValue> getDatumUsesInstanceValue() {
        if (datumUsesInstanceValue == null) {
            datumUsesInstanceValue = new ArrayList<>();
        }
        return this.datumUsesInstanceValue;
    }

    /**
     * Gets the value of the datumIsBoundedByInstanceVariable property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the Jakarta XML Binding object.
     * This is why there is not a {@code set} method for the datumIsBoundedByInstanceVariable property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDatumIsBoundedByInstanceVariable().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Datum.DatumIsBoundedByInstanceVariable }
     * 
     * 
     * @return
     *     The value of the datumIsBoundedByInstanceVariable property.
     */
    public List<Datum.DatumIsBoundedByInstanceVariable> getDatumIsBoundedByInstanceVariable() {
        if (datumIsBoundedByInstanceVariable == null) {
            datumIsBoundedByInstanceVariable = new ArrayList<>();
        }
        return this.datumIsBoundedByInstanceVariable;
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>{@code
     * <complexType>
     *   <complexContent>
     *     <restriction base="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}AssociationReference">
     *       <sequence>
     *         <element name="ddiReference" type="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}InternationalRegistrationDataIdentifier" minOccurs="0"/>
     *         <element name="validType" maxOccurs="unbounded" minOccurs="0">
     *           <simpleType>
     *             <restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
     *               <enumeration value="ConceptualValue"/>
     *               <enumeration value="DimensionalKeyDefinitionMember"/>
     *               <enumeration value="KeyDefinitionMember"/>
     *             </restriction>
     *           </simpleType>
     *         </element>
     *       </sequence>
     *     </restriction>
     *   </complexContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class DatumDenotesConceptualValue
        extends AssociationReference
    {


    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>{@code
     * <complexType>
     *   <complexContent>
     *     <restriction base="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}AssociationReference">
     *       <sequence>
     *         <element name="ddiReference" type="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}InternationalRegistrationDataIdentifier" minOccurs="0"/>
     *         <element name="validType" maxOccurs="unbounded" minOccurs="0">
     *           <simpleType>
     *             <restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
     *               <enumeration value="InstanceVariable"/>
     *             </restriction>
     *           </simpleType>
     *         </element>
     *       </sequence>
     *     </restriction>
     *   </complexContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class DatumIsBoundedByInstanceVariable
        extends AssociationReference
    {


    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>{@code
     * <complexType>
     *   <complexContent>
     *     <restriction base="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}AssociationReference">
     *       <sequence>
     *         <element name="ddiReference" type="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}InternationalRegistrationDataIdentifier" minOccurs="0"/>
     *         <element name="validType" maxOccurs="unbounded" minOccurs="0">
     *           <simpleType>
     *             <restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
     *               <enumeration value="Descriptor"/>
     *               <enumeration value="DimensionalKeyMember"/>
     *               <enumeration value="InstanceValue"/>
     *               <enumeration value="KeyMember"/>
     *               <enumeration value="LongMainKeyMember"/>
     *               <enumeration value="MainKeyMember"/>
     *               <enumeration value="ReferenceValue"/>
     *               <enumeration value="WideKeyMember"/>
     *             </restriction>
     *           </simpleType>
     *         </element>
     *       </sequence>
     *     </restriction>
     *   </complexContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class DatumUsesInstanceValue
        extends AssociationReference
    {


    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>{@code
     * <complexType>
     *   <complexContent>
     *     <restriction base="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}AssociationReference">
     *       <sequence>
     *         <element name="ddiReference" type="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}InternationalRegistrationDataIdentifier" minOccurs="0"/>
     *         <element name="validType" maxOccurs="unbounded" minOccurs="0">
     *           <simpleType>
     *             <restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
     *               <enumeration value="Notation"/>
     *             </restriction>
     *           </simpleType>
     *         </element>
     *       </sequence>
     *     </restriction>
     *   </complexContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class DatumUsesNotation
        extends AssociationReference
    {


    }

}
