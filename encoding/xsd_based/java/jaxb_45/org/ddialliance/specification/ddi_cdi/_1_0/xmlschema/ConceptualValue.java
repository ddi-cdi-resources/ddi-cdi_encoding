//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.3 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.ddialliance.specification.ddi_cdi._1_0.xmlschema;

import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlSeeAlso;
import jakarta.xml.bind.annotation.XmlType;


/**
 * Definition 
 *             ============ 
 *             Concept (with a notion of equality defined) being observed, captured, or derived which is associated to a single data instance.   
 *             
 *             Examples 
 *             ========== 
 *             A systolic blood pressure of 122 is measured. The instance value for that measurement in this paragraph is the character string "122". The associated measured concept (a blood pressure at that level) is the conceptual value.  The conceptual value comes from a conceptual domain associated with a conceptual variable.   
 *             
 *             Explanatory notes 
 *             =================== 
 *             This is the concept associated to the actual instance of data that is stored in a data point (the signified of a datum in the signification pattern).
 * 
 * <p>Java class for ConceptualValue complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>{@code
 * <complexType name="ConceptualValue">
 *   <complexContent>
 *     <extension base="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}Concept">
 *       <sequence>
 *         <element name="ConceptualValue_hasConceptFrom_ConceptualDomain">
 *           <complexType>
 *             <complexContent>
 *               <restriction base="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}AssociationReference">
 *                 <sequence>
 *                   <element name="ddiReference" type="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}InternationalRegistrationDataIdentifier" minOccurs="0"/>
 *                   <element name="validType" maxOccurs="unbounded" minOccurs="0">
 *                     <simpleType>
 *                       <restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
 *                         <enumeration value="ConceptualDomain"/>
 *                         <enumeration value="SentinelConceptualDomain"/>
 *                         <enumeration value="SubstantiveConceptualDomain"/>
 *                       </restriction>
 *                     </simpleType>
 *                   </element>
 *                 </sequence>
 *               </restriction>
 *             </complexContent>
 *           </complexType>
 *         </element>
 *       </sequence>
 *     </extension>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ConceptualValue", propOrder = {
    "conceptualValueHasConceptFromConceptualDomain"
})
@XmlSeeAlso({
    DimensionalKeyDefinitionMember.class,
    KeyDefinitionMember.class
})
public class ConceptualValue
    extends Concept
{

    @XmlElement(name = "ConceptualValue_hasConceptFrom_ConceptualDomain", required = true)
    protected ConceptualValue.ConceptualValueHasConceptFromConceptualDomain conceptualValueHasConceptFromConceptualDomain;

    /**
     * Gets the value of the conceptualValueHasConceptFromConceptualDomain property.
     * 
     * @return
     *     possible object is
     *     {@link ConceptualValue.ConceptualValueHasConceptFromConceptualDomain }
     *     
     */
    public ConceptualValue.ConceptualValueHasConceptFromConceptualDomain getConceptualValueHasConceptFromConceptualDomain() {
        return conceptualValueHasConceptFromConceptualDomain;
    }

    /**
     * Sets the value of the conceptualValueHasConceptFromConceptualDomain property.
     * 
     * @param value
     *     allowed object is
     *     {@link ConceptualValue.ConceptualValueHasConceptFromConceptualDomain }
     *     
     */
    public void setConceptualValueHasConceptFromConceptualDomain(ConceptualValue.ConceptualValueHasConceptFromConceptualDomain value) {
        this.conceptualValueHasConceptFromConceptualDomain = value;
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>{@code
     * <complexType>
     *   <complexContent>
     *     <restriction base="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}AssociationReference">
     *       <sequence>
     *         <element name="ddiReference" type="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}InternationalRegistrationDataIdentifier" minOccurs="0"/>
     *         <element name="validType" maxOccurs="unbounded" minOccurs="0">
     *           <simpleType>
     *             <restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
     *               <enumeration value="ConceptualDomain"/>
     *               <enumeration value="SentinelConceptualDomain"/>
     *               <enumeration value="SubstantiveConceptualDomain"/>
     *             </restriction>
     *           </simpleType>
     *         </element>
     *       </sequence>
     *     </restriction>
     *   </complexContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class ConceptualValueHasConceptFromConceptualDomain
        extends AssociationReference
    {


    }

}
