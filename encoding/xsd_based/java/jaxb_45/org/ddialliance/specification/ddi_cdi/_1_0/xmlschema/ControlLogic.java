//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.3 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.ddialliance.specification.ddi_cdi._1_0.xmlschema;

import java.util.ArrayList;
import java.util.List;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlSeeAlso;
import jakarta.xml.bind.annotation.XmlType;


/**
 * Definition 
 *             ============ 
 *             Control logic is a program in which the order of statements is explicit. Control logic is either deterministic (imperative) or non-deterministic (declarative). Deterministic control logic consists of control constructs. Declarative control logic is constraint- and/or rule-based. Control logic may contain control logic.  
 *             
 *             Examples 
 *             ========== 
 *             A loop control construct is deterministic control logic. A script is deterministic control logic. Rule based scheduling is declarative control logic.  
 *             
 *             Explanatory notes 
 *             =================== 
 *             DDI-CDI has extended control logic to include non-deterministic activity and step controls, which are not specifically described in DDI Lifecycle or DDI Codebook.
 * 
 * <p>Java class for ControlLogic complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>{@code
 * <complexType name="ControlLogic">
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <element name="description" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         <element name="identifier" type="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}Identifier" minOccurs="0"/>
 *         <element name="workflow" type="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}ControlledVocabularyEntry" minOccurs="0"/>
 *         <element name="ControlLogic_informs_ProcessingAgent" maxOccurs="unbounded" minOccurs="0">
 *           <complexType>
 *             <complexContent>
 *               <restriction base="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}AssociationReference">
 *                 <sequence>
 *                   <element name="ddiReference" type="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}InternationalRegistrationDataIdentifier" minOccurs="0"/>
 *                   <element name="validType" maxOccurs="unbounded" minOccurs="0">
 *                     <simpleType>
 *                       <restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
 *                         <enumeration value="Curator"/>
 *                         <enumeration value="ProcessingAgent"/>
 *                         <enumeration value="Service"/>
 *                       </restriction>
 *                     </simpleType>
 *                   </element>
 *                 </sequence>
 *               </restriction>
 *             </complexContent>
 *           </complexType>
 *         </element>
 *         <element name="ControlLogic_invokes_Activity" maxOccurs="unbounded">
 *           <complexType>
 *             <complexContent>
 *               <restriction base="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}AssociationReference">
 *                 <sequence>
 *                   <element name="ddiReference" type="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}InternationalRegistrationDataIdentifier" minOccurs="0"/>
 *                   <element name="validType" maxOccurs="unbounded" minOccurs="0">
 *                     <simpleType>
 *                       <restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
 *                         <enumeration value="Activity"/>
 *                         <enumeration value="Step"/>
 *                       </restriction>
 *                     </simpleType>
 *                   </element>
 *                 </sequence>
 *               </restriction>
 *             </complexContent>
 *           </complexType>
 *         </element>
 *         <element name="ControlLogic_hasSubControlLogic_ControlLogic" maxOccurs="unbounded" minOccurs="0">
 *           <complexType>
 *             <complexContent>
 *               <restriction base="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}AssociationReference">
 *                 <sequence>
 *                   <element name="ddiReference" type="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}InternationalRegistrationDataIdentifier" minOccurs="0"/>
 *                   <element name="validType" minOccurs="0">
 *                     <simpleType>
 *                       <restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
 *                         <enumeration value="AllenIntervalAlgebra"/>
 *                         <enumeration value="ConditionalControlLogic"/>
 *                         <enumeration value="ControlLogic"/>
 *                         <enumeration value="DeterministicImperative"/>
 *                         <enumeration value="NonDeterministicDeclarative"/>
 *                         <enumeration value="RuleBasedScheduling"/>
 *                         <enumeration value="Sequence"/>
 *                         <enumeration value="TemporalConstraints"/>
 *                         <enumeration value="TemporalControlConstruct"/>
 *                       </restriction>
 *                     </simpleType>
 *                   </element>
 *                 </sequence>
 *               </restriction>
 *             </complexContent>
 *           </complexType>
 *         </element>
 *         <element name="ControlLogic_has_InformationFlowDefinition" maxOccurs="unbounded" minOccurs="0">
 *           <complexType>
 *             <complexContent>
 *               <restriction base="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}AssociationReference">
 *                 <sequence>
 *                   <element name="ddiReference" type="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}InternationalRegistrationDataIdentifier" minOccurs="0"/>
 *                   <element name="validType" maxOccurs="unbounded" minOccurs="0">
 *                     <simpleType>
 *                       <restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
 *                         <enumeration value="InformationFlowDefinition"/>
 *                       </restriction>
 *                     </simpleType>
 *                   </element>
 *                 </sequence>
 *               </restriction>
 *             </complexContent>
 *           </complexType>
 *         </element>
 *       </sequence>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ControlLogic", propOrder = {
    "description",
    "identifier",
    "workflow",
    "controlLogicInformsProcessingAgent",
    "controlLogicInvokesActivity",
    "controlLogicHasSubControlLogicControlLogic",
    "controlLogicHasInformationFlowDefinition"
})
@XmlSeeAlso({
    DeterministicImperative.class,
    NonDeterministicDeclarative.class
})
public class ControlLogic {

    protected String description;
    protected Identifier identifier;
    protected ControlledVocabularyEntry workflow;
    @XmlElement(name = "ControlLogic_informs_ProcessingAgent")
    protected List<ControlLogic.ControlLogicInformsProcessingAgent> controlLogicInformsProcessingAgent;
    @XmlElement(name = "ControlLogic_invokes_Activity", required = true)
    protected List<ControlLogic.ControlLogicInvokesActivity> controlLogicInvokesActivity;
    @XmlElement(name = "ControlLogic_hasSubControlLogic_ControlLogic")
    protected List<ControlLogic.ControlLogicHasSubControlLogicControlLogic> controlLogicHasSubControlLogicControlLogic;
    @XmlElement(name = "ControlLogic_has_InformationFlowDefinition")
    protected List<ControlLogic.ControlLogicHasInformationFlowDefinition> controlLogicHasInformationFlowDefinition;

    /**
     * Gets the value of the description property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDescription(String value) {
        this.description = value;
    }

    /**
     * Gets the value of the identifier property.
     * 
     * @return
     *     possible object is
     *     {@link Identifier }
     *     
     */
    public Identifier getIdentifier() {
        return identifier;
    }

    /**
     * Sets the value of the identifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link Identifier }
     *     
     */
    public void setIdentifier(Identifier value) {
        this.identifier = value;
    }

    /**
     * Gets the value of the workflow property.
     * 
     * @return
     *     possible object is
     *     {@link ControlledVocabularyEntry }
     *     
     */
    public ControlledVocabularyEntry getWorkflow() {
        return workflow;
    }

    /**
     * Sets the value of the workflow property.
     * 
     * @param value
     *     allowed object is
     *     {@link ControlledVocabularyEntry }
     *     
     */
    public void setWorkflow(ControlledVocabularyEntry value) {
        this.workflow = value;
    }

    /**
     * Gets the value of the controlLogicInformsProcessingAgent property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the Jakarta XML Binding object.
     * This is why there is not a {@code set} method for the controlLogicInformsProcessingAgent property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getControlLogicInformsProcessingAgent().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ControlLogic.ControlLogicInformsProcessingAgent }
     * 
     * 
     * @return
     *     The value of the controlLogicInformsProcessingAgent property.
     */
    public List<ControlLogic.ControlLogicInformsProcessingAgent> getControlLogicInformsProcessingAgent() {
        if (controlLogicInformsProcessingAgent == null) {
            controlLogicInformsProcessingAgent = new ArrayList<>();
        }
        return this.controlLogicInformsProcessingAgent;
    }

    /**
     * Gets the value of the controlLogicInvokesActivity property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the Jakarta XML Binding object.
     * This is why there is not a {@code set} method for the controlLogicInvokesActivity property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getControlLogicInvokesActivity().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ControlLogic.ControlLogicInvokesActivity }
     * 
     * 
     * @return
     *     The value of the controlLogicInvokesActivity property.
     */
    public List<ControlLogic.ControlLogicInvokesActivity> getControlLogicInvokesActivity() {
        if (controlLogicInvokesActivity == null) {
            controlLogicInvokesActivity = new ArrayList<>();
        }
        return this.controlLogicInvokesActivity;
    }

    /**
     * Gets the value of the controlLogicHasSubControlLogicControlLogic property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the Jakarta XML Binding object.
     * This is why there is not a {@code set} method for the controlLogicHasSubControlLogicControlLogic property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getControlLogicHasSubControlLogicControlLogic().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ControlLogic.ControlLogicHasSubControlLogicControlLogic }
     * 
     * 
     * @return
     *     The value of the controlLogicHasSubControlLogicControlLogic property.
     */
    public List<ControlLogic.ControlLogicHasSubControlLogicControlLogic> getControlLogicHasSubControlLogicControlLogic() {
        if (controlLogicHasSubControlLogicControlLogic == null) {
            controlLogicHasSubControlLogicControlLogic = new ArrayList<>();
        }
        return this.controlLogicHasSubControlLogicControlLogic;
    }

    /**
     * Gets the value of the controlLogicHasInformationFlowDefinition property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the Jakarta XML Binding object.
     * This is why there is not a {@code set} method for the controlLogicHasInformationFlowDefinition property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getControlLogicHasInformationFlowDefinition().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ControlLogic.ControlLogicHasInformationFlowDefinition }
     * 
     * 
     * @return
     *     The value of the controlLogicHasInformationFlowDefinition property.
     */
    public List<ControlLogic.ControlLogicHasInformationFlowDefinition> getControlLogicHasInformationFlowDefinition() {
        if (controlLogicHasInformationFlowDefinition == null) {
            controlLogicHasInformationFlowDefinition = new ArrayList<>();
        }
        return this.controlLogicHasInformationFlowDefinition;
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>{@code
     * <complexType>
     *   <complexContent>
     *     <restriction base="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}AssociationReference">
     *       <sequence>
     *         <element name="ddiReference" type="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}InternationalRegistrationDataIdentifier" minOccurs="0"/>
     *         <element name="validType" maxOccurs="unbounded" minOccurs="0">
     *           <simpleType>
     *             <restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
     *               <enumeration value="InformationFlowDefinition"/>
     *             </restriction>
     *           </simpleType>
     *         </element>
     *       </sequence>
     *     </restriction>
     *   </complexContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class ControlLogicHasInformationFlowDefinition
        extends AssociationReference
    {


    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>{@code
     * <complexType>
     *   <complexContent>
     *     <restriction base="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}AssociationReference">
     *       <sequence>
     *         <element name="ddiReference" type="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}InternationalRegistrationDataIdentifier" minOccurs="0"/>
     *         <element name="validType" minOccurs="0">
     *           <simpleType>
     *             <restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
     *               <enumeration value="AllenIntervalAlgebra"/>
     *               <enumeration value="ConditionalControlLogic"/>
     *               <enumeration value="ControlLogic"/>
     *               <enumeration value="DeterministicImperative"/>
     *               <enumeration value="NonDeterministicDeclarative"/>
     *               <enumeration value="RuleBasedScheduling"/>
     *               <enumeration value="Sequence"/>
     *               <enumeration value="TemporalConstraints"/>
     *               <enumeration value="TemporalControlConstruct"/>
     *             </restriction>
     *           </simpleType>
     *         </element>
     *       </sequence>
     *     </restriction>
     *   </complexContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class ControlLogicHasSubControlLogicControlLogic
        extends AssociationReference
    {


    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>{@code
     * <complexType>
     *   <complexContent>
     *     <restriction base="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}AssociationReference">
     *       <sequence>
     *         <element name="ddiReference" type="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}InternationalRegistrationDataIdentifier" minOccurs="0"/>
     *         <element name="validType" maxOccurs="unbounded" minOccurs="0">
     *           <simpleType>
     *             <restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
     *               <enumeration value="Curator"/>
     *               <enumeration value="ProcessingAgent"/>
     *               <enumeration value="Service"/>
     *             </restriction>
     *           </simpleType>
     *         </element>
     *       </sequence>
     *     </restriction>
     *   </complexContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class ControlLogicInformsProcessingAgent
        extends AssociationReference
    {


    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>{@code
     * <complexType>
     *   <complexContent>
     *     <restriction base="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}AssociationReference">
     *       <sequence>
     *         <element name="ddiReference" type="{http://ddialliance.org/Specification/DDI-CDI/1.0/XMLSchema/}InternationalRegistrationDataIdentifier" minOccurs="0"/>
     *         <element name="validType" maxOccurs="unbounded" minOccurs="0">
     *           <simpleType>
     *             <restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
     *               <enumeration value="Activity"/>
     *               <enumeration value="Step"/>
     *             </restriction>
     *           </simpleType>
     *         </element>
     *       </sequence>
     *     </restriction>
     *   </complexContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class ControlLogicInvokesActivity
        extends AssociationReference
    {


    }

}
